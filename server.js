 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var al_parser = require('accept-language-parser');
var fs = require('fs');
var express = require('express');
var app = express();

if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use('/public', express.static(process.cwd() + '/public'));

app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });
  
app.route('/')
    .get(function(req, res) {
		  res.sendFile(process.cwd() + '/views/index.html');
    })


app.enable('trust proxy'); // ** TODO: Dive deeper into this to understand it better. It makes req.ip work, see below

app.route('/api/whoami')
    .get(function(req, res) {
  
  var clientData = {"ipaddress":null,"language":null,"software":null,"browser":null} 
  clientData["ipaddress"] = req.ip
  
  const languages = al_parser.parse(req.headers["accept-language"]);
  
  var acceptedLanguages = ""
  
  /* // TODO: Update this some day to handle multiple languages. (Current challenge on FCC only asks for 1.)
  languages.forEach((language) => {   
    console.log(language)
    acceptedLanguages = acceptedLanguages.concat(language['code'])
    console.log('acceptedlanguages.1 = '+acceptedLanguages)
    const alRegion = "-".concat((language["region"]) ? language["region"] : "") // its added with a '-'
    acceptedLanguages = acceptedLanguages.concat(alRegion)
    console.log('acceptedlanguages.2 = '+acceptedLanguages)
  }) 
  
  clientData["language"] = acceptedLanguages
  
  */
  
    var aLang = languages[0]["code"]
    let r = languages[0]["region"]
    clientData["language"] = aLang.concat( (r) ?  "-"+r : "")
    
  
  
  const techStr = req.headers["user-agent"]
  
  let p1 = techStr.indexOf('(')
  let p2 = techStr.indexOf(')')
  const browserStr = techStr.substring(0,p1) // TODO: Modularize this parsing code more. (It's late and im tired.)
  clientData["browser"] = browserStr.trim()
    
  const softwareStr = techStr.substring(p1-1,p2)
  clientData["software"] = softwareStr.trim()
    
  
  // const clientIPList = req.headers["x-forwarded-for"] 
  // const clientIP = clientIPList[0]
  

res.type('txt').send(JSON.stringify(clientData))
  
    
   //res.type('txt').send("req.headers = "+JSON.stringify(req.headers))
  
// 	  res.type('txt').send("req.body = "+JSON.stringify(req.body))

    })

// Respond not found to all the wrong routes
app.use(function(req, res, next){
  res.status(404);
  res.type('txt').send('Not found');
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})

app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});

